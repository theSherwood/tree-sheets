{"version":3,"sources":["tree_sheets/components/cell.cljs"],"mappings":";AASA,AAAA,AAAMA,AAAUC,AAAEC;AAAlB,AACE,AAAMC,AAAK,AAAAC,AAAYH,AAAEC;AAAzB,AAEE;AAAOG;AAAP,AAAa,AAAQ,AAAQF,AAAMA,AAAK,AAACG,AAASD;;;AAA3CA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAEX,AAAA,AAAME,AAAeC,AAAGC,AAAKC,AAAIC;AAAjC,AACE,AAAIH;AACF,AAAAI,AAAA,AAAA,AAA0BJ,AAAGC;AAA7B,AAAA,AAAAG,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAAAC,AAAA,AAAA,AAAwBL,AAAKC,AAAIC;AAAjC,AAAA,AAAAG,AAAAA,AAACD,AAAAA,AAAAA;;;AAEL,AAAKE,AACH,AAAA,AAACf,AAASO;AAEZ,AAAA,AAAMS,AAAmBC;AAAzB,AACE,AAAOC,AAAUD;;AAAjB,AACE,AAAM,AAAAE,AAAKD;AAAL,AAAA,AAAAC;AAAe,AAACC,AAAKF,AAAUG;;AAA/BF;;;AAAN,AACE,AAAI,AAAA,AAAW,AAAaD;AAC1B,AAAQ,AAAA,AAAgBA;;AACxB,AAAO,AAAcA;;;;;AAHzB;;;;;AAKJ,AAAA,AAAMI,AAAmBC,AAAEC,AAAKC,AAAYf,AAAIC;AAAhD,AACE,AAAMe,AAAS,AAAA,AAAA,AAAAC,AAAYH;AACrBI,AAAM,AAAkBF;AACxBG,AAAI,AAAgBH;AACpBI,AAAY,AAAU,AAASJ;AAC/BK,AAAI,AAAOR;AAJjB,AAKE,AACE,AAAK,AAAA,AAACS,AAAED,AAAe,AAAA,AAAOF;AAC9B,AAACI,AAAqB,AAAA,AAAA,AAAAN,AAAOH;;AAF/B,AAIE,AAAK,AAAA,AAACQ,AAAED,AAAiB,AAACC,AAAEJ,AAAME;AAClC,AAACG,AAAqB,AAAA,AAAA,AAAAN,AAAUH;;AALlC,AAOE,AAAA,AAAK,AAAA,AAACQ,AAAED,AAAa,AAAYR;AACjC,AAAAW,AAAoB,AAAA,AAAA,AAAAP,AAAcH;AAAlC,AAAA,AAAAU;AAAA,AAAAA,AAASC;AAAT,AACE,AAAAC,AAA4B,AAAA,AAAgBD;AAA5C,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACJ,AAAqBI;;AADxB;;;AAEA,AAAAH,AAAiB,AAAA,AAAQT;AAAzB,AAAA,AAAAS;AAAA,AAAAA,AAASI;AAAT,AACE,AAAAC,AAAA,AAAA,AAAyBD;AAAzB,AAAA,AAAAC,AAAAA,AAAC1B,AAAAA,AAAAA;;AACD,AAAA2B,AAAA,AAAA,AAAmC9B,AAAIC;AAAvC,AAAA,AAAA6B,AAAAA,AAAC3B,AAAAA,AAAAA;;;;AAbP,AAeE,AAAA,AAACmB,AAAED;AACH,AAACf,AAAkB,AAAIO;;AAhBzB;;;;;;AAkBJ,AAAA,AAAMkB,AAAelB,AAAEC,AAAKC,AAAYf,AAAIC;AAA5C,AACE,AAAM,AAAC+B,AAAI,AAAA,AAAW,AAAa,AAAUnB;AAA7C,AAEE,AAAMQ,AAAI,AAAOR;AACXG,AAAS,AAAA,AAAA,AAAAC,AAAYH;AAD3B,AAEE,AAAI,AAAA,AAAK,AAAA,AAACQ,AAAED,AAAa,AAAYR;AACnC,AAAAW,AAAoB,AAAA,AAAA,AAAAP,AAAcH;AAAlC,AAAA,AAAAU;AAAA,AAAAA,AAASC;AAAT,AACE,AAAAC,AAA4B,AAAA,AAAgBD;AAA5C,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACJ,AAAqBI;;AADxB;;;AAEA,AAAAH,AAAiB,AAAA,AAAQT;AAAzB,AAAA,AAAAS;AAAA,AAAAA,AAASI;AAAT,AACE,AAAAK,AAAA,AAAA,AAAyBL;AAAzB,AAAA,AAAAK,AAAAA,AAAC9B,AAAAA,AAAAA;;AACD,AAAA+B,AAAA,AAAA,AAAmClC,AAAIC;AAAvC,AAAA,AAAAiC,AAAAA,AAAC/B,AAAAA,AAAAA;;;;AAEL,AAAAgC,AAAMd;AAAN,AAAA,AAAAc;AAAA;AAEE,AACE,AAAiBtB;;AACjB,AAAkBA;;AAClB,AAACU,AAAqBP;;AACtB,AAAA,AAACoB;AAAD,AACE,AAAA,AAAA,AAAoBpB;AADtB;;;AANJ;AAWE,AAACV,AAAkB,AAAA,AAAA,AAAIO;;;AAXzB;AAcE,AAACU,AAAqB,AAAA,AAAA,AAAAN,AAAOH;;;AAd/B;AAiBE,AAACS,AAAqB,AAAA,AAAA,AAAAN,AAAUH;;;AAjBlC;AAoBE,AAACS,AAAqB,AAAA,AAAA,AAAAN,AAAQH;;;AApBhC;AAuBE,AAACS,AAAqB,AAAA,AAAA,AAAAN,AAASH;;;;AAvBjC;;;;;AAZN;;;AAuCF,AAAA,AAAMuB,AAAoBxB,AAAEC;AAA5B,AACE,AAAI,AAACQ,AAAEgB,AAA0B,AAAA,AAAA,AAAArB,AAASH;AACxC,AAAA,AAACsB;AAAD,AAAgB,AAACb,AAAqB,AAAA,AAAA,AAAAN,AAAYH;AAAlD;;AACA,AAACS,AAAqB,AAAA,AAAA,AAAAN,AAASH;;;AAEnC,AAAA,AAAMyB,AAAqBvB;AAA3B,AACE,AAAMA;AAAN,AACE,AACC,AAAA,AAAIA,AACJ,AAAA,AACC,AAAIA;;AAJR;;;AAOF,AAAA,AAAMwB,AAAMxC,AAAIC,AAAIwC,AAAQC;AAA5B,AACE,AAAMK,AAAY,AAAAC,AAAA,AAAA,AAAmBP;AAAnB,AAAA,AAAAO,AAAAA,AAACC,AAAAA,AAAAA;;AACbC,AAAc,AAAAC,AAAA,AAAA,AAAmBlD;AAAnB,AAAA,AAAAkD,AAAAA,AAACF,AAAAA,AAAAA;;AACflC,AAAY,AAAAqC,AAAA,AAAA,AAA6BpD,AAAIC;AAAjC,AAAA,AAAAmD,AAAAA,AAACH,AAAAA,AAAAA;;AACbnC,AAAK,AAAA,AAACuC;AAHZ,AAAAV,AAKMW;AALN,AAK4B,AAAAX,AAAA,AAAA1B,AAACc,AAAgBjB,AAAMC,AAAYf,AAAIC;;AALnE,AAAA2C,AAMMW;AANN,AAMgC,AAAAX,AAAA,AAAA3B,AAACL,AAAoBE,AAAMC,AAAYf,AAAIC;;AAN3E,AAOMuD;AAPN,AAO6B,AAACjB,AAAoB,AAAA,AAAA,AAAAtB,AAAYH;;AAP9D,AAAA+B,AAQMY;AARN,AAQiC,AAAAZ,AAACR,AAAqBvB;;AARvD,AAAAgC,AASMY;AATN,AAS8B,AAACrD,AACA,AAAA,AAAA,AAAAY,AAASF,AACT,AAAA,AAAA+B,AACA9C,AACAC;;AAb/B,AAeE;AAAA,AACE,AAAM6D,AAAM,AAAA,AAAA,AAAA7C,AAAaiC;AACnBtB,AAAQ,AAAA,AAAA,AAAAX,AAASF;AADvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA4C,AAEqB,AAAA,AAAA,AAAY3D,AAAQC;AAFzC,AAGoB,AAAA,AAAA0D,AAACI,AAAMjD,AAAKkD;AAHhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ;AAAA,AAK2B,AAAA,AAAAA,AAACG,AAAMjD,AAAKkD;AALvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAMkCP;AANlC,AAQ+B,AACE,AAAA,AAAAO,AAACE,AAAMjD,AAAKkD;;AACZ,AAAAH,AAACtB;AAVlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAY4C,AAAA,AAAAtB,AAAA,AAAA,AAACgD,AAAKlD,AACN,AAAA,AAAK,AAAA,AAAA,AAAI,AAAA,AACC,AAAA,AAAK,AAAA,AAAA,AAAAE,AAAaiC,AAErCM,AAGCE,AACI,AAAAQ,AAAI,AAAA,AAAA,AAAAjD,AAAaF;AAAjB,AAAA,AAAAmD;AAAAA;;AAAA;;AApBxC,AAAA,AAAA,AAAA,AAAA,AAsBsCX,AAEJE,AAE/B,AAAA/B,AAAA,AAAAT,AAAuB,AAAAmD,AAAA,AAAA,AAAA,AAAA,AACuBxC;AADvB,AAAA,AAAAwC,AAAAA,AAACnB,AAAAA,AAAAA;;AAAxB,AAAA,AAAAvB;AAAA,AAAA,AAAAA,AAAWD;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA0C;AAAA,AAE0B,AAAA,AAAAA,AAACJ,AAAMjD,AAAKkD;AAFtC,AAGItB,AAAKd;;AAHT;;AA1BH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA+BIyC,AAAcvD,AAEG,AAAA,AAAA,AAAAG,AAAS8B,AACb/C,AACAC,AACboE,AAAcvD,AAEG,AAAA,AAAA,AAAAG,AAAS8B,AACb/C,AACAC,AACboE,AAAcvD,AAEG,AAAA,AAAA,AAAAG,AAAS8B,AACb/C,AACAC,AACboE,AAAcvD,AAEG,AAAA,AAAA,AAAAG,AAAS8B,AACb/C,AACAC","names":["tree-sheets.components.cell/debounce","f","interval","dbnc","js/goog.async.Debouncer","args","cljs.core/to-array","tree-sheets.components.cell/set-cell-text","id","text","row","col","G__60996","re-posh.core/dispatch","G__60997","tree-sheets.components.cell/set-cell-text-debounced","tree-sheets.components.cell/focus-parent-cell","node","curr-node","and__4115__auto__","cljs.core.not_EQ_","js/document","tree-sheets.components.cell/textarea-key-down","e","refs","cell-entity","textarea","cljs.core/deref","start","end","text-length","key","cljs.core._EQ_","tree-sheets.utils/focus-target-element","temp__5733__auto__","child-grid","temp__5735__auto__","first-child-cell","cell-id","G__61003","G__61004","tree-sheets.components.cell/cell-key-down","cljs.core/not","G__61005","G__61006","G__61007","js/setTimeout","tree-sheets.components.cell/overlay-mouse-down","js/document.activeElement","tree-sheets.components.cell/fix-textarea-height","tree-sheets.components.cell/cell","grid-id","grid","p1__61008#","p1__61009#","p1__61010#","p1__61011#","grid-entity","G__61016","re-posh.core/subscribe","column-entity","G__61017","G__61018","reagent.core.atom","handle-cell-key-down","handle-textarea-key-down","handle-textarea-input","handle-overlay-mouse-down","handle-textarea-change","p1__61012#","p1__61013#","p1__61014#","width","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.get","or__4126__auto__","p1__61015#","G__61019","tree-sheets.components.border/border"],"sourcesContent":["(ns tree-sheets.components.cell\n  (:require\n   [tree-sheets.components.border :refer [border]]\n   [tree-sheets.utils :refer [focus-target-element]]\n   [re-posh.core :as rp :refer [subscribe dispatch]]\n   [reagent.core :as r])\n  (:import [goog.async Debouncer]))\n\n;; https://www.martinklepsch.org/posts/simple-debouncing-in-clojurescript.html\n(defn debounce [f interval]\n  (let [dbnc (Debouncer. f interval)]\n    ;; We use apply here to support functions of various arities\n    (fn [& args] (.apply (.-fire dbnc) dbnc (to-array args)))))\n\n(defn set-cell-text [id text row col]\n  (if id\n    (dispatch [:set-cell-text id text])\n    (dispatch [:create-cell text row col])))\n\n(def set-cell-text-debounced\n  (debounce set-cell-text 800))\n\n(defn focus-parent-cell [node]\n  (loop [curr-node node]\n    (when (and curr-node (not= curr-node js/document))\n      (if (.contains (.-classList curr-node) \"cell\")\n        (.focus (.querySelector curr-node \".cell-inner\"))\n        (recur (.-parentNode curr-node))))))\n\n(defn textarea-key-down [e refs cell-entity row col]\n  (let [textarea (:textarea @refs)\n        start (.-selectionStart textarea)\n        end (.-selectionEnd textarea)\n        text-length (.-length (.-value textarea))\n        key (.-key e)]\n    (cond\n      (and (= key \"ArrowUp\") (zero? end))\n      (focus-target-element (:top @refs))\n\n      (and (= key \"ArrowDown\") (= start text-length))\n      (focus-target-element (:bottom @refs))\n\n      (and (= key \"Enter\") (.-shiftKey e))\n      (if-let [child-grid (:child-grid @refs)]\n        (when-let [first-child-cell (.querySelector child-grid \".cell-inner\")]\n          (focus-target-element first-child-cell))\n        (if-let [cell-id (:db/id cell-entity)]\n          (dispatch [:create-graph cell-id])\n          (dispatch [:create-cell-with-child row col])))\n\n      (= key \"Escape\")\n      (focus-parent-cell (.. e -currentTarget)))))\n\n(defn cell-key-down [e refs cell-entity row col]\n  (when (not (.contains (.-classList (.-target e)) \"textarea\"))\n    \n    (let [key (.-key e)\n          textarea (:textarea @refs)]\n      (if (and (= key \"Enter\") (.-shiftKey e))\n        (if-let [child-grid (:child-grid @refs)]\n          (when-let [first-child-cell (.querySelector child-grid \".cell-inner\")]\n            (focus-target-element first-child-cell))\n          (if-let [cell-id (:db/id cell-entity)]\n            (dispatch [:create-graph cell-id])\n            (dispatch [:create-cell-with-child row col])))\n\n        (case key\n          \"Enter\"\n          (do\n            (.preventDefault e)\n            (.stopPropagation e)\n            (focus-target-element textarea)\n            (js/setTimeout\n             #(.setSelectionRange textarea 0 999999)\n             50))\n\n          \"Escape\"\n          (focus-parent-cell (.. e -currentTarget -parentNode -parentNode))\n\n          \"ArrowUp\"\n          (focus-target-element (:top @refs))\n\n          \"ArrowDown\"\n          (focus-target-element (:bottom @refs))\n\n          \"ArrowLeft\"\n          (focus-target-element (:left @refs))\n\n          \"ArrowRight\"\n          (focus-target-element (:right @refs))\n          \n          nil)))))\n\n(defn overlay-mouse-down [e refs]\n  (if (= js/document.activeElement (:inner @refs))\n    (js/setTimeout #(focus-target-element (:textarea @refs)) 10)\n    (focus-target-element (:inner @refs))))\n\n(defn fix-textarea-height [textarea]\n  (when textarea\n    (set!\n     (.. textarea -style -height)\n     (str\n      (.. textarea -scrollHeight)\n      \"px\"))))\n\n(defn cell [row col grid-id grid]\n  (let [grid-entity (subscribe [:by-id grid-id])\n        column-entity (subscribe [:by-id col])\n        cell-entity (subscribe [:cell-by-row-col row col])\n        refs (r/atom {})\n\n        handle-cell-key-down #(cell-key-down % refs @cell-entity row col)\n        handle-textarea-key-down #(textarea-key-down % refs @cell-entity row col)\n        handle-textarea-input #(fix-textarea-height (:textarea @refs))\n        handle-overlay-mouse-down #(overlay-mouse-down % refs)\n        handle-textarea-change #(set-cell-text-debounced\n                                 (:db/id @cell-entity)\n                                 (.. % -target -value)\n                                 row\n                                 col)]\n    \n    (fn []\n      (let [width (:col/width @column-entity)\n            cell-id (:db/id @cell-entity)]\n        [:div.cell {:class (str \"loc-\" row \"-\" col)\n                    :ref #(swap! refs assoc :cell %)}\n         [:div.cell-inner {:tab-index -1\n                           :ref #(swap! refs assoc :inner %)\n                           :on-key-down handle-cell-key-down}\n          \n          [:textarea.textarea {:ref #(do\n                                       (swap! refs assoc :textarea %)\n                                       (fix-textarea-height %))\n                               :cols 10000\n                               :style {:font-size (get @cell-entity :font-size \"14px\")\n                                       :max-width (str (if (zero?\n                                                            (* 8 (:col/width @column-entity)))\n                                                         200 200) \"px\")}\n                               :on-input handle-textarea-input\n                               :spell-check \"false\"\n\n                               :on-change handle-textarea-change\n                               :default-value (or (:cell/text @cell-entity) \"\")\n\n                               :on-key-down handle-textarea-key-down}]\n\n          [:div.overlay {:on-mouse-down handle-overlay-mouse-down}]]\n\n         (when-let [child-grid @(subscribe\n                                 [:by-id [:grid/parent cell-id]])]\n           [:div.child-grid {:ref #(swap! refs assoc :child-grid %)}\n            [grid cell-id]])\n\n         [border {:refs refs\n                  :side :top\n                  :grid-id (:db/id @grid-entity)\n                  :row row\n                  :col col}]\n         [border {:refs refs\n                  :side :left\n                  :grid-id (:db/id @grid-entity)\n                  :row row\n                  :col col}]\n         [border {:refs refs\n                  :side :bottom\n                  :grid-id (:db/id @grid-entity)\n                  :row row\n                  :col col}]\n         [border {:refs refs\n                  :side :right\n                  :grid-id (:db/id @grid-entity)\n                  :row row\n                  :col col}]]))))"]}