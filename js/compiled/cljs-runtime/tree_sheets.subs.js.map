{"version":3,"sources":["tree_sheets/subs.cljs"],"mappings":";AAMA,AAAAA,AAAA;AAAAC,AAEC,AAAAE,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQE;AAAR,AAAAD,AAAAD,AAAA,AAAA,AAAUG;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGOA;;AALR,AAAA,AAAAP,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;AAOD,AAAAM,AAAA;AAAAC,AAEC,AAAAC,AAAKJ;AAAL,AAAA,AAAAK,AAAAD;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAAQL;AAAR,AAAAD,AAAAM,AAAA,AAAA,AAAUC;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGOA;;AALR,AAAA,AAAAJ,AAAAC,AAAAD,AAAAC,AAACP,AAAAA,AAAAA;AAOD,AAAAW,AAAA;AAAAC,AAEC,AAAAC,AAAKT;AAAL,AAAA,AAAAU,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAAQV;AAAR,AAAAD,AAAAW,AAAA,AAAA,AAAUC;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGOA;;AALR,AAAA,AAAAJ,AAAAC,AAAAD,AAAAC,AAACZ,AAAAA,AAAAA;AAOD,AAAA,AAACgB,AAGA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAd,AAAAe,AAAA,AAAA,AAAMd;AAAN,AAAAD,AAAAe,AAAA,AAAA,AAAQR;AAAR,AAAAP,AAAAe,AAAA,AAAA,AAAYH;AAAZ,AAAA,AACG,AAAAI,AAAA,AAAA,AAA0BT;AAA1B,AAAA,AAAAS,AAAAA,AAACC,AAAAA,AAAAA;AACD,AAAAC,AAAA,AAAA,AAA0BN;AAA1B,AAAA,AAAAM,AAAAA,AAACD,AAAAA,AAAAA;;AAEJ,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAAnB,AAAAqB,AAAA,AAAA,AAAME;AAAN,AAAAvB,AAAAqB,AAAA,AAAA,AAAgBG;AAAhBF,AAAAF;AAAA,AAAApB,AAAAsB,AAAA,AAAA,AAA4BrB;AAA5B,AACE,AAACwB,AAAM,AAACC,AACA,AAACC,AAAI,AAAA,AAACC,AAAW,AAAA,AAAYL,AAC7B,AAACI,AAAI,AAAA,AAACC,AAAW,AAAA,AAAYJ;;AAExC,AAAAK,AAAA;AAAAC,AAGC,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAhC,AAAAiC,AAAA,AAAA,AAAMhC;AAAN,AAAAD,AAAAiC,AAAA,AAAA,AAAQ1B;AAAR,AAAAP,AAAAiC,AAAA,AAAA,AAAYrB;AAAZ,AACE,AAAAsB,AAAA,AAAA,AAAqB3B,AAAIK;AAAzB,AAAA,AAAAsB,AAAAA,AAACjB,AAAAA,AAAAA;;AAJJc,AAMC,AAAKI;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGOA;;AATR,AAAA,AAAAN,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAClC,AAAAA,AAAAA","names":["G__60863","G__60864","re-posh.core/reg-sub","p__60865","vec__60866","cljs.core.nth","_","id","G__60869","G__60870","p__60871","vec__60872","row","G__60875","G__60876","p__60877","vec__60878","col","re_frame.core.reg_sub","p__60881","vec__60882","G__60885","re-posh.core/subscribe","G__60886","p__60887","p__60888","vec__60889","vec__60892","row-cells","col-cells","cljs.core/first","clojure.set.intersection","cljs.core/set","cljs.core.map","G__60895","G__60896","G__60897","p__60898","vec__60899","G__60902","cell-id"],"sourcesContent":["(ns tree-sheets.subs\n  (:require\n   [re-posh.core :as rp :refer [reg-sub subscribe]]\n   [re-frame.core :as rf]\n   [clojure.set :refer [intersection]]))\n\n(reg-sub\n :by-id\n (fn [_ [_ id]]\n   {:type :pull\n    :pattern '[*]\n    :id id}))            \n\n(reg-sub\n :cells-by-row\n (fn [_ [_ row]]\n   {:type :pull\n    :pattern '[:cell/_row]\n    :id row}))\n\n(reg-sub\n :cells-by-col\n (fn [_ [_ col]]\n   {:type :pull\n    :pattern '[:cell/_col]\n    :id col}))\n  \n(rf/reg-sub\n :cell-id\n\n (fn [[_ row col]]\n   [(subscribe [:cells-by-row row])\n    (subscribe [:cells-by-col col])])\n\n (fn [[row-cells col-cells] [_]]\n   (first (intersection\n           (set (map :db/id (:cell/_row row-cells)))\n           (set (map :db/id (:cell/_col col-cells)))))))\n\n(reg-sub\n :cell-by-row-col\n \n (fn [[_ row col]]\n   (subscribe [:cell-id row col]))\n \n (fn [cell-id]\n   {:type :pull\n    :pattern '[*]\n    :id cell-id}))"]}