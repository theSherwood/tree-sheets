{"version":3,"sources":["tree_sheets/components/border.cljs"],"mappings":"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","names":["var_args","G__60916","tree-sheets.components.border/delayed-focus-textarea","js/Error","selector","tree_sheets.components.border.delayed_focus_textarea","delay","js/setTimeout","textarea","js/document","tree-sheets.utils/focus-target-element","tree-sheets.components.border/insert","v","idx","itm","cljs.core._EQ_","cljs.core.conj","cljs.core/vec","cljs.core.concat","cljs.core.subvec","p__60937","map__60941","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","tree-sheets.components.border/insert-cell","text","side","grid-id","row","col","grid-entity","G__60945","cljs.core/deref","G__60946","G__60947","datascript.core/pull","tree-sheets.db/conn","rows","cols","G__60948","cljs.core/Keyword","row-id","cljs.core/rand-int","new-rows","G__60953","re-posh.core/dispatch","js/console.log","G__60954","col-id","new-cols","G__60955","G__60960","tree-sheets.components.border/navigate-row","f","e60963","temp__5735__auto__","r","cljs.core.nth","G__60966","node","js/Object","e","tree-sheets.components.border/navigate-col","e60967","c","G__60970","p__60973","map__60974","tree-sheets.components.border/key-down","refs","key","G__60976","G__60977","G__60978","G__60979","G__60980","cljs.core/dec","cljs.core/inc","G__60981","G__60982","G__60983","p__60987","map__60988","tree-sheets.components.border/border","p1__60984#","p1__60985#","handle-input","handle-key-down","p1__60986#","cljs.core/name","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns tree-sheets.components.border\n  (:require\n   [re-posh.core :as rp :refer [subscribe dispatch]]\n   [tree-sheets.utils :refer [focus-target-element]]\n   [datascript.core :as ds]\n   [tree-sheets.db :refer [conn]]))\n\n(defn delayed-focus-textarea \n  ([selector] (delayed-focus-textarea selector 50))\n  ([selector delay]\n   (js/setTimeout\n    #(let [textarea (.querySelector js/document selector)]\n      (focus-target-element textarea)\n      (.setSelectionRange textarea 999999 99999))\n    delay)))\n\n(defn insert [v idx itm]\n  (if (= -1 idx)\n    (conj v itm)\n    (vec (concat (subvec v 0 idx) [itm] (subvec v idx)))))\n\n(defn insert-cell [{:keys [text side grid-id row col]}]\n  (let [grid-entity (ds/pull @conn '[*] grid-id)\n        grid-id (:db/id grid-entity)\n        rows (:grid/rows grid-entity)\n        cols (:grid/cols grid-entity)]\n    (when grid-id\n      (case side\n        :top\n        (let [row-id (rand-int 1000000000)\n              new-rows (insert rows (.indexOf rows row) row-id)]\n          (dispatch [:insert-cell\n                     grid-id row-id col new-rows cols text true false])\n          (delayed-focus-textarea \n           (str \".cell.loc-\" row-id \"-\" col \" textarea\") 100))\n\n        :bottom\n        (let [row-id (rand-int 1000000000)\n              new-rows (insert rows (inc (.indexOf rows row)) row-id)]\n          (js/console.log row (inc (.indexOf rows row)) rows new-rows)\n          (dispatch [:insert-cell\n                     grid-id row-id col new-rows cols text true false])\n          (delayed-focus-textarea \n           (str \".cell.loc-\" row-id \"-\" col \" textarea\") 100))\n\n        :left\n        (let [col-id (rand-int 1000000000)\n              new-cols (insert cols (.indexOf cols col) col-id)]\n          (dispatch [:insert-cell\n                     grid-id row col-id rows new-cols text false true])\n          (delayed-focus-textarea \n           (str \".cell.loc-\" row \"-\" col-id \" textarea\") 100))\n\n        :right\n        (let [col-id (rand-int 1000000000)\n              new-cols (insert cols (inc (.indexOf cols col)) col-id)]\n          (dispatch [:insert-cell\n                     grid-id row col-id rows new-cols text false true])\n          (delayed-focus-textarea \n           (str \".cell.loc-\" row \"-\" col-id \" textarea\") 100))\n        \n        nil))))\n\n(defn navigate-row [f selector rows row col]\n  (try\n    (when-let [r (nth rows (f (.indexOf rows row)))]\n      (when-let [node\n                 (.querySelector\n                  js/document\n                  (str \".cell.loc-\" r \"-\" col \" \" selector))]\n        (.focus node)))\n    (catch js/Object e nil)))\n\n(defn navigate-col [f selector cols row col]\n  (try\n    (when-let [c (nth cols (f (.indexOf cols col)))]\n      (when-let [node\n                 (.querySelector\n                  js/document\n                  (str \".cell.loc-\" row \"-\" c \" \" selector))]\n        (.focus node)))\n    (catch js/Object e nil)))\n\n(defn key-down [{:keys [e refs side grid-id row col]}]\n  (let [key (.-key e)\n        grid-entity (ds/pull @conn '[*] grid-id)\n        rows (:grid/rows grid-entity)\n        cols (:grid/cols grid-entity)]\n    (case side\n      :top (case key\n             \"ArrowDown\"\n             (focus-target-element (:inner @refs))\n\n             \"ArrowLeft\"\n             (navigate-col dec \">.border.top\" cols row col)\n\n             \"ArrowRight\"\n             (navigate-col inc \">.border.top\" cols row col)\n\n             \"ArrowUp\"\n             (navigate-row dec \".cell-inner\" rows row col)\n\n             nil)\n      :left (case key\n              \"ArrowDown\"\n              (navigate-row inc \">.border.left\" rows row col)\n\n              \"ArrowLeft\"\n              (navigate-col dec \".cell-inner\" cols row col)\n\n              \"ArrowRight\"\n              (focus-target-element (:inner @refs))\n\n              \"ArrowUp\"\n              (navigate-row dec \">.border.left\" rows row col)\n\n              nil)\n      :right (case key\n               \"ArrowDown\"\n               (navigate-row inc \">.border.right\" rows row col)\n\n               \"ArrowLeft\"\n               (focus-target-element (:inner @refs))\n\n               \"ArrowRight\"\n               (navigate-col inc \".cell-inner\" cols row col)\n\n               \"ArrowUp\"\n               (navigate-row dec \">.border.right\" rows row col)\n\n               nil)\n      :bottom (case key\n                \"ArrowDown\"\n                (navigate-row inc \".cell-inner\" rows row col)\n\n                \"ArrowLeft\"\n                (navigate-col dec \">.border.bottom\" cols row col)\n\n                \"ArrowRight\"\n                (navigate-col inc \">.border.bottom\" cols row col)\n\n                \"ArrowUp\"\n                (focus-target-element (:inner @refs))\n\n                nil))))\n\n(defn border [{:keys [refs side grid-id row col]}]\n  (let [handle-input #(do\n                        ;; input events cannot be cancelled through preventDefault\n                        (set! (.. % -target -innerHTML) \"\")\n                        (insert-cell\n                         {:text (.. % -nativeEvent -data)\n                          :side side\n                          :grid-id grid-id\n                          :row row\n                          :col col}))\n        handle-key-down #(key-down {:e %\n                                    :refs refs\n                                    :side side\n                                    :grid-id grid-id\n                                    :row row\n                                    :col col})]\n    \n    (fn []\n      [:div.border {:content-editable true\n                    :class (name side)\n                    :ref #(swap! refs assoc side %)\n                    :on-click focus-target-element\n                    :on-key-down handle-key-down\n                    :on-input handle-input\n                    :tab-index -1}])))\n"]}