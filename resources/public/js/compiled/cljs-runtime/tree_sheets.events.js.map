{"version":3,"sources":["tree_sheets/events.cljs"],"mappings":"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","names":["G__60905","G__60906","re-posh.core/reg-event-ds","_","tree-sheets.db/initial-db","G__60909","G__60910","p__60912","vec__60913","cljs.core.nth","id","text","G__60919","G__60920","p__60921","vec__60922","row","col","G__60925","G__60926","p__60927","vec__60931","cell-id","grid-id","cljs.core/rand-int","col-id","row-id","G__60934","G__60935","p__60936","vec__60938","temp-cell","G__60943","G__60944","p__60949","vec__60950","rows","cols","new-row","new-col","cell-datoms","grid-datoms","row-datoms","col-datoms","cljs.core/vec","cljs.core.concat"],"sourcesContent":["(ns tree-sheets.events\n  (:require\n   [re-posh.core :as rp :refer [reg-event-ds]]\n   [tree-sheets.db :as db]))\n\n(reg-event-ds\n ::initialize-db\n (fn [_ _]\n   db/initial-db))\n\n(reg-event-ds\n :set-cell-text\n (fn [_ [_ id text]]\n   [[:db/add id :cell/text text]]))\n\n(reg-event-ds\n :create-cell\n (fn [_ [_ text row col]]\n   [[:db/add \"temp\" :app/type :type/cell]\n    [:db/add \"temp\" :cell/col col]\n    [:db/add \"temp\" :cell/row row]\n    [:db/add \"temp\" :cell/text text]]))\n\n(reg-event-ds\n :create-graph\n (fn [_ [_ cell-id]]\n   (let [grid-id (rand-int 100000000)\n         col-id (rand-int 100000000)\n         row-id (rand-int 100000000)]\n     [[:db/add grid-id :app/type :type/graph]\n      [:db/add grid-id :grid/parent cell-id]\n      [:db/add grid-id :grid/rows [row-id]]\n      [:db/add grid-id :grid/cols [col-id]]\n      [:db/add col-id :app/type :type/col]\n      [:db/add col-id :col/width 55]\n      [:db/add row-id :app/type :type/row]])))\n\n(reg-event-ds\n :create-cell-with-child\n (fn [_ [_ row col]]\n   (let [temp-cell (rand-int 1000000000)\n         grid-id (rand-int 1000000000)\n         col-id (rand-int 1000000000)\n         row-id (rand-int 1000000000)]\n     [[:db/add temp-cell :app/type :type/cell]\n      [:db/add temp-cell :cell/col col]\n      [:db/add temp-cell :cell/row row]\n      [:db/add temp-cell :cell/text \"\"]\n      [:db/add grid-id :app/type :type/graph]\n      [:db/add grid-id :grid/parent temp-cell]\n      [:db/add grid-id :grid/rows [row-id]]\n      [:db/add grid-id :grid/cols [col-id]]\n      [:db/add col-id :app/type :type/col]\n      [:db/add col-id :col/width 55]\n      [:db/add row-id :app/type :type/row]])))\n\n(reg-event-ds\n :insert-cell\n (fn [_ [_ grid-id row col rows cols text new-row new-col]]\n   (let [cell-datoms [[:db/add \"temp\" :app/type :type/cell]\n                      [:db/add \"temp\" :cell/col col]\n                      [:db/add \"temp\" :cell/row row]\n                      [:db/add \"temp\" :cell/text text]]\n         grid-datoms [[:db/add grid-id :grid/rows rows]\n                      [:db/add grid-id :grid/cols cols]]\n         row-datoms (when new-row\n                      [[:db/add row :app/type :type/row]])\n         col-datoms (when new-col\n                      [[:db/add col :app/type :type/col]\n                       [:db/add col :col/width 55]])]\n     (vec (concat cell-datoms grid-datoms row-datoms col-datoms)))))"]}