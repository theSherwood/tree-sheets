{
"version":3,
"file":"goog.async.debouncer.js",
"lineCount":67,
"mappings":"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",
"sources":["goog/async/debouncer.js"],
"sourcesContent":["// Copyright 2015 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the goog.async.Debouncer class.\n *\n * @see ../demos/timers.html\n */\n\ngoog.provide('goog.async.Debouncer');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.Timer');\n\n\n\n/**\n * Debouncer will perform a specified action exactly once for any sequence of\n * signals fired repeatedly so long as they are fired less than a specified\n * interval apart (in milliseconds). Whether it receives one signal or multiple,\n * it will always wait until a full interval has elapsed since the last signal\n * before performing the action.\n * @param {function(this: T, ...?)} listener Function to callback when the\n *     action is triggered.\n * @param {number} interval Interval over which to debounce. The listener will\n *     only be called after the full interval has elapsed since the last signal.\n * @param {T=} opt_handler Object in whose scope to call the listener.\n * @constructor\n * @struct\n * @extends {goog.Disposable}\n * @final\n * @template T\n */\ngoog.async.Debouncer = function(listener, interval, opt_handler) {\n  goog.async.Debouncer.base(this, 'constructor');\n\n  /**\n   * Function to callback\n   * @const @private {function(this: T, ...?)}\n   */\n  this.listener_ =\n      opt_handler != null ? goog.bind(listener, opt_handler) : listener;\n\n  /**\n   * Interval for the debounce time\n   * @const @private {number}\n   */\n  this.interval_ = interval;\n\n  /**\n   * Cached callback function invoked after the debounce timeout completes\n   * @const @private {!Function}\n   */\n  this.callback_ = goog.bind(this.onTimer_, this);\n\n  /**\n   * Indicates that the action is pending and needs to be fired.\n   * @private {boolean}\n   */\n  this.shouldFire_ = false;\n\n  /**\n   * Indicates the count of nested pauses currently in effect on the debouncer.\n   * When this count is not zero, fired actions will be postponed until the\n   * debouncer is resumed enough times to drop the pause count to zero.\n   * @private {number}\n   */\n  this.pauseCount_ = 0;\n\n  /**\n   * Timer for scheduling the next callback\n   * @private {?number}\n   */\n  this.timer_ = null;\n\n  /**\n   * When set this is a timestamp. On the onfire we want to reschedule the\n   * callback so it ends up at this time.\n   * @private {?number}\n   */\n  this.refireAt_ = null;\n\n  /**\n   * The last arguments passed into `fire`.\n   * @private {!IArrayLike}\n   */\n  this.args_ = [];\n};\ngoog.inherits(goog.async.Debouncer, goog.Disposable);\n\n\n/**\n * Notifies the debouncer that the action has happened. It will debounce the\n * call so that the callback is only called after the last action in a sequence\n * of actions separated by periods less the interval parameter passed to the\n * constructor, passing the arguments from the last call of this function into\n * the debounced function.\n * @param {...?} var_args Arguments to pass on to the debounced function.\n */\ngoog.async.Debouncer.prototype.fire = function(var_args) {\n  this.args_ = arguments;\n  // When this method is called, we need to prevent fire() calls from within the\n  // previous interval from calling the callback. The simplest way of doing this\n  // is to call this.stop() which calls clearTimeout, and then reschedule the\n  // timeout. However clearTimeout and setTimeout are expensive, so we just\n  // leave them untouched and when they do happen we potentially reschedule.\n  this.shouldFire_ = false;\n  if (this.timer_) {\n    this.refireAt_ = goog.now() + this.interval_;\n    return;\n  }\n  this.timer_ = goog.Timer.callOnce(this.callback_, this.interval_);\n};\n\n\n/**\n * Cancels any pending action callback. The debouncer can be restarted by\n * calling {@link #fire}.\n */\ngoog.async.Debouncer.prototype.stop = function() {\n  if (this.timer_) {\n    goog.Timer.clear(this.timer_);\n    this.timer_ = null;\n  }\n  this.refireAt_ = null;\n  this.shouldFire_ = false;\n  this.args_ = [];\n};\n\n\n/**\n * Pauses the debouncer. All pending and future action callbacks will be delayed\n * until the debouncer is resumed. Pauses can be nested.\n */\ngoog.async.Debouncer.prototype.pause = function() {\n  ++this.pauseCount_;\n};\n\n\n/**\n * Resumes the debouncer. If doing so drops the pausing count to zero, pending\n * action callbacks will be executed as soon as possible, but still no sooner\n * than an interval's delay after the previous call. Future action callbacks\n * will be executed as normal.\n */\ngoog.async.Debouncer.prototype.resume = function() {\n  if (!this.pauseCount_) {\n    return;\n  }\n\n  --this.pauseCount_;\n  if (!this.pauseCount_ && this.shouldFire_) {\n    this.doAction_();\n  }\n};\n\n\n/** @override */\ngoog.async.Debouncer.prototype.disposeInternal = function() {\n  this.stop();\n  goog.async.Debouncer.base(this, 'disposeInternal');\n};\n\n\n/**\n * Handler for the timer to fire the debouncer.\n * @private\n */\ngoog.async.Debouncer.prototype.onTimer_ = function() {\n  // There is a newer call to fire() within the debounce interval.\n  // Reschedule the callback and return.\n  if (this.refireAt_) {\n    this.timer_ =\n        goog.Timer.callOnce(this.callback_, this.refireAt_ - goog.now());\n    this.refireAt_ = null;\n    return;\n  }\n  this.timer_ = null;\n\n  if (!this.pauseCount_) {\n    this.doAction_();\n  } else {\n    this.shouldFire_ = true;\n  }\n};\n\n\n/**\n * Calls the callback.\n * @private\n */\ngoog.async.Debouncer.prototype.doAction_ = function() {\n  this.shouldFire_ = false;\n  this.listener_.apply(null, this.args_);\n};\n"],
"names":["goog","provide","require","async","Debouncer","goog.async.Debouncer","listener","interval","opt_handler","base","listener_","bind","interval_","callback_","onTimer_","shouldFire_","pauseCount_","timer_","refireAt_","args_","inherits","Disposable","prototype","fire","goog.async.Debouncer.prototype.fire","var_args","arguments","now","Timer","callOnce","stop","goog.async.Debouncer.prototype.stop","clear","pause","goog.async.Debouncer.prototype.pause","resume","goog.async.Debouncer.prototype.resume","doAction_","disposeInternal","goog.async.Debouncer.prototype.disposeInternal","goog.async.Debouncer.prototype.onTimer_","goog.async.Debouncer.prototype.doAction_","apply"]
}
